xiim6g7k6ri7biu:
    id: xiim6g7k6ri7biu
    extname: .md
    path: 2007/03/30/get-url-parameters-in-javascript/index.md
    data:
        url: /2007/03/30/get-url-parameters-in-javascript/
        id: 86c010a3-a527-45cb-8974-18470b5222b8
        title: Get URL Parameters in Javascript
        date: 2007-03-30T12:00:00.000Z
        redirects:
            - /blog/2007/03/30/get-url-parameters-in-javascript/
        view: post
        tags:
            - dev
            - javascript
        comments:
            - name: John Hill
              link: 'http://www.theglasspeople.net/'
              date: '2007-06-26 15:37'
              text: >
                  Great little script. I am using it and it works very very well!

                  It would be uber cool if you could add a link to a plain text version
                  of these functions so that users didn’t have to convert over illegal
                  characters.


                  Fantastic job! You saved me some time.
            - name: DataShaman
              link: 'https://datashaman.com'
              date: '2006-06-26 21:07'
              text: >
                  Thanks! Glad you liked it. :)


                  It’s not very obvious that it’s a link, but if you click on the PLAIN
                  TEXT heading above each code block, it converts the block to text, for
                  easy copy and pasting.
        excerpt: >-
            I needed a _Javascript_ function which would give me access to the URL
            querystring, much like PHP's `$_GET` associative array. Unfortunately most
            of the solutions I found were either wrong, incomplete or badly written.
            IMHO. :)


            So, being a programmer, I decided to knock up my own version of the
            script.
        mentions: []
    contents: >
        I needed a _Javascript_ function which would give me access to the URL
        querystring, much like PHP's `$_GET` associative array. Unfortunately most
        of the solutions I found were either wrong, incomplete or badly written.
        IMHO. :)


        So, being a programmer, I decided to knock up my own version of the
        script.<!--more-->


        Many of the scripts I saw parsed through the querystring everytime a single
        query parameter was required, which is inefficient, especially if you're
        going to be using the same function repeatedly in the same context.


        My script adds a property `parameters` to the `window.location` _DOM_ object
        which is where this information should be stored, in my opinion.


        It should only be run once to setup the associative array of query
        parameters, preferably when the document is completely loaded, but I don't
        think that's necessary since the location object should be ready right from
        the start.


        I'm surprised that the _DOM_ standard hasn't given us an easy way of
        accessing this information. Especially since the increasing use of _Ajax_
        means that more and more decisions are made in the browser rather than in
        server code.

            /**
             * Copyright (c) 2007 Marlin Forbes (http://www.datashaman.com)
             * Dual licensed under the MIT
             * (http://www.opensource.org/licenses/mit-license.php)
             * and GPL
             * (http://www.opensource.org/licenses/gpl-license.php) licenses.
             */
             
            /**
             * Creates an object property window.location.parameters which
             * is an associative array of the URL querystring parameters used
             * when requesting the current document.
             * If the parameter is present but has no value, such as the parameter
             * flag in http://example.com/index.php?flag&id=blah, null is stored.
             */
            function setupParameters() {
                var parameters = new Object();

                if(window.location.search) {
                    var paramArray = window.location.search.substr(1).split(‘&’);
                    var length = paramArray.length;

                    for (var index = 0;index <length; index++ ) {
                        var param = paramArray[index].split(‘=’);
                        var name = param[0];
                        var value =
                            typeof param[1] == “string”
                            ? decodeURIComponent(param[1].replace(/+/g, ‘ ‘))
                            : null;
                        parameters[name] = value;
                    }
                }
                window.location.parameters = parameters;
            }

        For a lazy loading getParameter function, you could do this:

            function getParameter(name) {
                if(typeof window.location.parameters == “undefined”)
                    setupParameters();
                return window.location.parameters[name];
            }

        The way it works is as follows:


        * All query parameters are decoded, so any entity references, `%20` and `+`
        symbols are converted to their human versions

        * If a query parameter does not have a value such as the parameter flag in:

              http://example.com/page.php?flag

          then the `window.location.parameter['flag']` will return `null`

        *  If a query parameter is not defined, then it will follow the usual
        _JavaScript_ convention and return `undefined`


        I think this covers most situations. I'm not 100% certain that the regular
        expression replacement of all + signs with spaces is correct, there seems to
        be some ambiguity about what to do with + signs. None of the supplied native
        decode functions decode them to spaces. Let me know if you have any answers
        on that one.
xiim6g7k6ri7bix:
    id: xiim6g7k6ri7bix
    extname: .md
    path: 2007/04/09/10-line-accordian-script-for-jquery/index.md
    data:
        url: /2007/04/09/10-line-accordian-script-for-jquery/
        id: 832a86d4-789b-4b4a-82d0-ff9cc649dd9a
        view: post
        title: 10 line accordian script for jQuery (or less)
        redirects:
            - /blog/2007/04/09/10-line-accordian-script-for-jquery/
        date: 2007-04-09T12:00:00.000Z
        tags:
            - dev
            - javascript
            - jquery
        excerpt: >-
            Anyone who's used jQuery, knows that you can write less and do more with
            JavaScript.


            Recently I wanted to use an accordian script to present a large amount of
            content on one page.


            After looking at the options available, I decided that I could write
            something better. And smaller.
        mentions: []
    contents: >
        Anyone who's used jQuery, knows that you can write less and do more with
        JavaScript.


        Recently I wanted to use an accordian script to present a large amount of
        content on one page.


        After looking at the options available, I decided that I could write
        something better. And smaller.<!--more-->


        So here's my jQuery accordian script:

            $.accordian = function(container) {
                $(container).find('.title')
                    .hover(function() { $(this).css('cursor', 'pointer'); },
                            function() { $(this).css('cursor', 'default') })
                    .click(function() {
                        $(container).find('.content:visible').slideUp('fast');
                        $('.content:hidden', this.parentNode).slideDown('fast');
                        return false;
                    });
            };

        Short, huh? ;) Now let's explain how it works. Because jQuery coding is so
        short, it pretty much reads like English.


        When the mouse hovers a title, the cursor is changed to a pointer or hand,
        and when it moves away from the title, the cursor is changed back to the
        default shape.


        When the title is clicked, any visible content in the whole accordian slides
        up fast, and any content which is hidden under the current block slides down
        fast.

            <html>
                <head>
                    <script type="text/javascript" src="jquery.js"></script>
                    <script type="text/javascript" src="accordian.js"></script>
                    <script type="text/javascript">
                        $(document).ready(function() {
                            // Initialize the accordian by telling it
                            // which blocks hold the content
                            $.accordian('#accordian > div');
                        });
                    </script>
                    <style>
                    .content {
                        display: none;
                    }
                    </style>
                </head>
                <body>
                    <div id="accordian">
                        <div>
                            <div class="title">Section 1</div>
                            <div class="content">Content for section 1</div>
                        </div>
                        <div>
                            <div class="title">Section 2</div>
                            <div class="content">Content for section 2</div>
                        </div>
                        <div>
                            <div class="title">Section 3</div>
                            <div class="content">Content for section 3</div>
                        </div>
                    </div>
                </body>
            </html>

        Let's explain this.

            <script type="text/javascript" src="jquery.js"></script>

        This loads the jQuery library script which you should have already. If not,
        download it from the jQuery site.

            <script type="text/javascript" src="accordian.js"></script>

        This pulls in the script above, which should be saved to accordian.js or
        whatever you prefer. Just remember to use the same filename on this line.


        In the next script block, we're using jQuery's easy onLoad replacement,
        which guarantees that all elements in the document will be ready, when run.
        If you've used jQuery, you should be familiar with this construct. If not,
        then you should read the jQuery documentation.

            // Initialize the accordian by telling it
            // which blocks hold the content
            $.accordian('#accordian');

        The jQuery library uses (amongst other methods) CSS selectors to target
        elements for manipulation. Line 9 sets up the accordian by telling it which
        block should be turned into an accordian.


        As you can see from the source file above, the accordian block must be
        formatted according to the following structure for it to work correctly:

            <div id="someid">
                <div>
                    <div class="title">Some Title</div>
                    <div class="content">
                        This is some content
                    </div>
                </div>
                <div>
                    <div class="title">Another title</div>
                    <div class="content">
                        This is further content
                    </div>
                </div>
            </div>

        Use can use any id for the accordian block, just ensure that you use the
        same id when initializing the accordian.


        Without further ado, here's a demo of the accordian script in action.


        <p class="codepen" data-height="265" data-theme-id="dark"
        data-default-tab="js,result" data-user="datashaman" data-slug-hash="bGNPPBM"
        style="height: 265px; box-sizing: border-box; display: flex; align-items:
        center; justify-content: center; border: 2px solid; margin: 1em 0; padding:
        1em;" data-pen-title="10 line accordian script for jQuery (or less)">
          <span>See the Pen <a href="https://codepen.io/datashaman/pen/bGNPPBM">
          10 line accordian script for jQuery (or less)</a> by Marlin Forbes (<a href="https://codepen.io/datashaman">@datashaman</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
        </p>

        <script async src="https://static.codepen.io/assets/embed/ei.js"></script>
xiim6g7k6ri7biy:
    id: xiim6g7k6ri7biy
    extname: .md
    path: 2014/01/26/cumulative-filter-object/index.md
    data:
        url: /2014/01/26/cumulative-filter-object/
        id: c943f5d7-702f-4405-9c22-8ef12817f98b
        title: Cumulative Filter Object
        date: 2014-01-26T12:00:00.000Z
        view: post
        tags:
            - dev
            - coffeescript
            - javascript
        excerpt: >-
            I've created a cumulative object in coffeescript, useful for creating
            filters.


            It's closest to a Reader / Environment monad.


            Every time you call it with arguments, it merges them into a running
            context, which it uses to create the next filter which is returned. You
            can create graphs of filters, deriving from a common point.
        mentions: []
    contents: >
        I've created a cumulative object in coffeescript, useful for creating
        filters.


        It's closest to a Reader / Environment monad.


        Every time you call it with arguments, it merges them into a running
        context, which it uses to create the next filter which is returned. You can
        create graphs of filters, deriving from a common point.<!--more-->


        If the argument is callable, call it to get the new properties to merge.
        This allows you to dynamically create the properties on the fly.


        When you want to get the current context, call the filter without arguments,
        which is a signal for the filter to return the internal context object.


        This means you can easily merge two filters together, since filters are
        callable and produce their context if called without arguments.


        Here's the definition:


        <script
        src="https://gist.github.com/8515466.js?file=definition.coffee"></script>


        And here’s how to use it:


        <script src="https://gist.github.com/8515466.js?file=usage.coffee"></script>


        You can create objects in a remarkably literate style, using the function
        above.
xiim6g7k6ri7biz:
    id: xiim6g7k6ri7biz
    extname: .md
    path: 2019/12/17/coming-soon/index.md
    data:
        url: /2019/12/17/coming-soon/
        id: 820b9c62-55ab-47c8-a701-3df9463cda8f
        title: Coming Soon
        date: 2019-12-17T07:33:00.000Z
        summary: 'Insert content here. Soon. Now-now. :P'
        view: post
        mentions:
            - type: entry
              author:
                  type: card
                  name: Checkmention XSS test
                  photo: >-
                      https://webmention.io/avatar/checkmention.appspot.com/75232e0b1732e48930188394129043b56a9f44961eac063725de38d554a6cd36.jpeg
                  url: 'https://checkmention.appspot.com/'
              url: >-
                  https://checkmention.appspot.com/content/17056ab99e0/eacfb30af2d1ec550d779f24ed21c215f730b0e5/xss
              published: '2020-02-18T05:00:51+00:00'
              wm-received: '2020-02-18T05:00:54Z'
              wm-id: 757507
              wm-source: >-
                  https://checkmention.appspot.com/content/17056ab99e0/eacfb30af2d1ec550d779f24ed21c215f730b0e5/xss
              wm-target: 'https://datashaman.com/2019/12/17/coming-soon/'
              content:
                  html: >-
                      <a>Clicking this</a>

                      should not cause an alert.

                      <span>This div

                      should not alert.</span>

                      Try clicking <a>this link</a>

                      &amp;&lt;script&gt;alert("encoded-xss")&amp;&lt;/script&gt;

                      and <a>this too</a>.

                      <b>Mouse over this</b>

                      should not cause an alert. This broken

                      <img src="http://not.really.an.image" alt="not.really.an.image" />
                      should not throw an alert.


                      Neither should <img
                      src="https://checkmention.appspot.com/content/17056ab99e0/eacfb30af2d1ec550d779f24ed21c215f730b0e5/j&amp;#x41vascript:alert('test2')"
                      alt="j&amp;#x41vascript:alert('test2')" />.<br />

                      Please look at the <a
                      href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">Owasp
                      XSS prevention cheat sheet</a> for more information.
                  text: >-
                      Clicking this

                      should not cause an alert.

                      This div

                      should not alert.

                      Try clicking this link

                      &<script>alert("encoded-xss")&</script>

                      and this too.

                      Mouse over this

                      should not cause an alert. This broken
                       should not throw an alert.

                      Neither should .


                      Please look at the Owasp XSS prevention cheat sheet for more
                      information.
              in-reply-to: 'https://datashaman.com/2019/12/17/coming-soon/'
              wm-property: in-reply-to
              wm-private: false
            - type: entry
              author:
                  type: card
                  name: Jonathan Ive
                  photo: >-
                      https://webmention.io/avatar/checkmention.appspot.com/c658b9d3700c6b83d0a19e3e9c02ed40bdd65bb2a696f4b8b0efc42169447e56.png
                  url: 'https://www.apple.com/pr/bios/jonathan-ive.html'
              url: 'https://www.apple.com/pr/bios/jonathan-ive.html'
              published: '2020-02-18T05:00:51+00:00'
              wm-received: '2020-02-18T05:00:54Z'
              wm-id: 757508
              wm-source: >-
                  https://checkmention.appspot.com/content/17056ab99e0/eacfb30af2d1ec550d779f24ed21c215f730b0e5/identity
              wm-target: 'https://datashaman.com/2019/12/17/coming-soon/'
              content:
                  html: >-
                      I love the way your site looks, though I'm <a
                      href="https://checkmention.appspot.com">not really <em>the</em> Jony
                      Ive</a>. How easy is it for someone to discover the real author of
                      this note? Please also check that the links in this note have no
                      <code>rel="me"</code> attribute on them.
                  text: >-
                      I love the way your site looks, though I'm not really the Jony Ive.
                      How easy is it for someone to discover the real author of this note?
                      Please also check that the links in this note have no rel="me"
                      attribute on them.
              in-reply-to: 'https://datashaman.com/2019/12/17/coming-soon/'
              wm-property: in-reply-to
              wm-private: false
              rels:
                  canonical: 'https://www.apple.com/pr/bios/jonathan-ive.html'
            - type: entry
              author:
                  type: card
                  name: Checkmention
                  photo: >-
                      https://webmention.io/avatar/checkmention.appspot.com/18d522b2ddbef12a0a104dd17fbc24c15dcf0d123bc6611687e0051e13fc1559.png
                  url: 'https://checkmention.appspot.com/'
              url: >-
                  https://checkmention.appspot.com/content/17056ab99e0/eacfb30af2d1ec550d779f24ed21c215f730b0e5/success
              published: '2020-02-18T05:00:51+00:00'
              wm-received: '2020-02-18T05:00:53Z'
              wm-id: 757505
              wm-source: >-
                  https://checkmention.appspot.com/content/17056ab99e0/eacfb30af2d1ec550d779f24ed21c215f730b0e5/success
              wm-target: 'https://datashaman.com/2019/12/17/coming-soon/'
              content:
                  text: Congratulations! You've successfully handled a webmentioned note.
              in-reply-to: 'https://datashaman.com/2019/12/17/coming-soon/'
              wm-property: in-reply-to
              wm-private: false
            - type: entry
              author:
                  type: card
                  name: Does clicking me alert?
                  photo: >-
                      https://webmention.io/avatar/checkmention.appspot.com/75232e0b1732e48930188394129043b56a9f44961eac063725de38d554a6cd36.jpeg
                  url: ''
              url: >-
                  https://checkmention.appspot.com/content/17056ab99e0/eacfb30af2d1ec550d779f24ed21c215f730b0e5/hcardxss
              published: '2020-02-18T05:00:51+00:00'
              wm-received: '2020-02-18T05:00:53Z'
              wm-id: 757506
              wm-source: >-
                  https://checkmention.appspot.com/content/17056ab99e0/eacfb30af2d1ec550d779f24ed21c215f730b0e5/hcardxss
              wm-target: 'https://datashaman.com/2019/12/17/coming-soon/'
              content:
                  text: >-
                      This test embeds XSS within the hcard name and time field. Clicking
                      on

                      the name or title should not raise an alert.
              in-reply-to: 'https://datashaman.com/2019/12/17/coming-soon/'
              wm-property: in-reply-to
              wm-private: false
    contents: |
        Insert content here. Soon. Now-now. :P
xiim6g7k6ri7bj0:
    id: xiim6g7k6ri7bj0
    extname: .md
    path: 2019/12/17/quicksand-dunes/index.md
    data:
        url: /2019/12/17/quicksand-dunes/
        id: a214cde4-321a-4b91-8d73-9647f8e19c4b
        title: Quicksand Dunes
        date: 2019-12-17T14:51:00.000Z
        view: post
        tags:
            - improv
            - writing
        redirects:
            - test-path
            - other-path/page.html
        excerpt: >-
            Wherein I tackle my first improv writing task. Select a topic at random
            and write for 5m starting each sentence with, "Yes, let's!"
        mentions: []
    contents: >
        Wherein I tackle my first improv writing task. Select a topic at random and
        write for 5m starting each sentence with, "Yes, let's!"<!--more-->


        > Yes, let's travel to the Quicksand Dunes, the legendary deathtrap that
        lies in wait for unwary travellers!

        > 

        > Yes, let's thumb our noses at the fates and sail our boards down the steep
        slopes!

        > 

        > Yes, let's toil our way back up again and again, never falling prey to the
        slipping, sliding escalators of sand!

        > 

        > Yes, let's celebrate life at dune's top, thighs shaking from the effort of
        the climb!

        > 

        > Yes, let's shout out loud from the highest point: We have conquered this
        demon!

        > 

        > Yes, let's dine on our carefully carried basket of culinary treasures,
        savouring the moments with each bite in the setting sun!

        > 

        > Yes, let's end our days in the sand and sun heavy with tiredness and dust,
        carried away by the wind to sleep!
xiim6g7k6ri7bj1:
    id: xiim6g7k6ri7bj1
    extname: .md
    path: tags/dev/index.md
    data:
        posts:
            items:
                - xiim6g7k6ri7biy
                - xiim6g7k6ri7bix
                - xiim6g7k6ri7biu
            total: 3
            currentPage: 1
            lastPage: 1
            perPage: 6
        tag: dev
        title: dev
        url: /dev/
        view: tag
    contents: ''
xiim6g7k6ri7bj2:
    id: xiim6g7k6ri7bj2
    extname: .md
    path: tags/javascript/index.md
    data:
        posts:
            items:
                - xiim6g7k6ri7biy
                - xiim6g7k6ri7bix
                - xiim6g7k6ri7biu
            total: 3
            currentPage: 1
            lastPage: 1
            perPage: 6
        tag: javascript
        title: javascript
        url: /javascript/
        view: tag
    contents: ''
xiim6g7k6ri7bj3:
    id: xiim6g7k6ri7bj3
    extname: .md
    path: tags/jquery/index.md
    data:
        posts:
            items:
                - xiim6g7k6ri7bix
            total: 1
            currentPage: 1
            lastPage: 1
            perPage: 6
        tag: jquery
        title: jquery
        url: /jquery/
        view: tag
    contents: ''
xiim6g7k6ri7bj4:
    id: xiim6g7k6ri7bj4
    extname: .md
    path: tags/coffeescript/index.md
    data:
        posts:
            items:
                - xiim6g7k6ri7biy
            total: 1
            currentPage: 1
            lastPage: 1
            perPage: 6
        tag: coffeescript
        title: coffeescript
        url: /coffeescript/
        view: tag
    contents: ''
xiim6g7k6ri7bj5:
    id: xiim6g7k6ri7bj5
    extname: .md
    path: tags/improv/index.md
    data:
        posts:
            items:
                - xiim6g7k6ri7bj0
            total: 1
            currentPage: 1
            lastPage: 1
            perPage: 6
        tag: improv
        title: improv
        url: /improv/
        view: tag
    contents: ''
xiim6g7k6ri7bj6:
    id: xiim6g7k6ri7bj6
    extname: .md
    path: tags/writing/index.md
    data:
        posts:
            items:
                - xiim6g7k6ri7bj0
            total: 1
            currentPage: 1
            lastPage: 1
            perPage: 6
        tag: writing
        title: writing
        url: /writing/
        view: tag
    contents: ''
xiim6g7k6ri7bj7:
    id: xiim6g7k6ri7bj7
    extname: .md
    path: tags/index.md
    data:
        tags:
            coffeescript:
                items:
                    - xiim6g7k6ri7biy
                lastPage: 1
                total: 1
            dev:
                items:
                    - xiim6g7k6ri7biy
                lastPage: 3
                total: 3
            improv:
                items:
                    - xiim6g7k6ri7bj0
                lastPage: 1
                total: 1
            javascript:
                items:
                    - xiim6g7k6ri7biy
                lastPage: 3
                total: 3
            jquery:
                items:
                    - xiim6g7k6ri7bix
                lastPage: 1
                total: 1
            writing:
                items:
                    - xiim6g7k6ri7bj0
                lastPage: 1
                total: 1
        title: Tags
        url: /tags/
        view: tags
    contents: ''
xiim6g7k6ri7bj8:
    id: xiim6g7k6ri7bj8
    extname: .xml
    path: feed.xml
    data:
        entries:
            - xiim6g7k6ri7bj0
            - xiim6g7k6ri7biz
            - xiim6g7k6ri7biy
            - xiim6g7k6ri7bix
            - xiim6g7k6ri7biu
        url: /feed.xml
        view: feed
    contents: ''
xiim6g7k6ri7bj9:
    id: xiim6g7k6ri7bj9
    extname: .md
    path: index.md
    data:
        posts:
            items:
                - xiim6g7k6ri7bj0
                - xiim6g7k6ri7biz
                - xiim6g7k6ri7biy
                - xiim6g7k6ri7bix
                - xiim6g7k6ri7biu
            total: 5
            currentPage: 1
            lastPage: 1
            perPage: 6
        title: ''
        url: /
        view: home
    contents: ''
xiim6g7k6ri7bja:
    id: xiim6g7k6ri7bja
    extname: .xml
    path: sitemap.xml
    data:
        urls:
            - id: xiim6g7k6ri7biu
              priority: '0.6000'
            - id: xiim6g7k6ri7bix
              priority: '0.6000'
            - id: xiim6g7k6ri7biy
              priority: '0.6000'
            - id: xiim6g7k6ri7biz
              priority: '0.6000'
            - id: xiim6g7k6ri7bj0
              priority: '0.6000'
            - id: xiim6g7k6ri7bj1
              priority: '0.7000'
            - id: xiim6g7k6ri7bj2
              priority: '0.7000'
            - id: xiim6g7k6ri7bj3
              priority: '0.7000'
            - id: xiim6g7k6ri7bj4
              priority: '0.7000'
            - id: xiim6g7k6ri7bj5
              priority: '0.7000'
            - id: xiim6g7k6ri7bj6
              priority: '0.7000'
            - id: xiim6g7k6ri7bj7
              priority: '0.8000'
            - id: xiim6g7k6ri7bj9
        url: /sitemap.xml
        view: sitemap
    contents: ''
